// Code generated by MockGen. DO NOT EDIT.
// Source: ./writer.go

// Package mock_document is a generated GoMock package.
package mock_document

import (
	bytes "bytes"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	go_document "github.com/okysetiawan/go-document"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// AddRow mocks base method.
func (m *MockWriter) AddRow(cells []interface{}) go_document.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRow", cells)
	ret0, _ := ret[0].(go_document.Writer)
	return ret0
}

// AddRow indicates an expected call of AddRow.
func (mr *MockWriterMockRecorder) AddRow(cells interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRow", reflect.TypeOf((*MockWriter)(nil).AddRow), cells)
}

// Buffer mocks base method.
func (m *MockWriter) Buffer() (*bytes.Buffer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Buffer")
	ret0, _ := ret[0].(*bytes.Buffer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Buffer indicates an expected call of Buffer.
func (mr *MockWriterMockRecorder) Buffer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Buffer", reflect.TypeOf((*MockWriter)(nil).Buffer))
}

// CreateSheet mocks base method.
func (m *MockWriter) CreateSheet(sheetName string, headers ...string) go_document.Writer {
	m.ctrl.T.Helper()
	varargs := []interface{}{sheetName}
	for _, a := range headers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateSheet", varargs...)
	ret0, _ := ret[0].(go_document.Writer)
	return ret0
}

// CreateSheet indicates an expected call of CreateSheet.
func (mr *MockWriterMockRecorder) CreateSheet(sheetName interface{}, headers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{sheetName}, headers...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSheet", reflect.TypeOf((*MockWriter)(nil).CreateSheet), varargs...)
}

// Save mocks base method.
func (m *MockWriter) Save(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockWriterMockRecorder) Save(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWriter)(nil).Save), path)
}
